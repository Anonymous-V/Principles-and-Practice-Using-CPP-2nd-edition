/*
 * Описание задачи:
 * ================
 * Напишите программу, находящую все простые числа между 1 и 100. Для этого
 * можно написать функцию, проверяющую, является ли число простым (т.е. делится
 * ли оно на простое число, не превосходящее данное), используя вектор простых
 * чисел, записанный в порядке возрастания (например, если вектор называется
 * primes, то primes[0] == 2, primes[1] == 3, primes[2] == 5 и т.д.). Напишите
 * цикл перебора чисел от 1 до 100, проверьте каждое из них на простоту и
 * сохраните найденные простые числа в векторе. Напишите другой цикл, в котором
 * все найденные простые числа выводятся на экран. Сравните полученные результаты
 * с вектором primes. Первым простым числом считается число 2.
 *
 * Идея реализации:
 * ================
 * Число называется простым если имеет два делителя: на единицу и на самого себя.
 * В данном случае используется самый простой и не совсем эффективный алгоритм -
 * для нового числа n проверяются все делители, т.е. от 1 до n, если количество
 * делителей больше двух, то цикл завершается и возвращается ответ, что число
 * не является простым. Для этого используется фунция check_primary.
 * */

#include "../../std_lib_facilities.h"

// Функция проверки числа на простоту
bool check_primes(int val) {
    int cnt = 0;
    for (int i = 1; i <= val; ++i) {
        if (val % i == 0) ++cnt;
        if (cnt > 2) return false;
    }
    return true;
}

int main() {
    vector <int> primes;

    for (int i = 2; i < 100; ++i) {
        if ( check_primes(i) ) primes.push_back(i);
    }

    for (int val : primes)
        cout << val << " ";

    return 0;
}