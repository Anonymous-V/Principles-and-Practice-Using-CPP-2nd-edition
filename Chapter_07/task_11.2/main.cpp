/*
 * Основная задача:
 * ================
 * Переработайте две программы, написанные вами при выполнении упраждениний к
 * главам 4 и 5. Приведите в порядок их код в соответствии с правилами, описанными
 * в данной главе. Посмотрите, не нашлись ли в процессе наведения порядка какие-либо
 * ошибки в ваших исходных текстах
 *
 * История изменений:
 * 12.08.2020 - Код разбит на функции и добавлены комментарии к программе;
 *              ошибок замечено не было.
 * */

/*
 * Описание задачи:
 * ================
 * Реализуйте простую игру на угадывание "Быки и коровы". Программа должна хранить
 * вектор из четырех различных чисел в диапазоне от 0 до 9 (т.е., например,
 * 2345, но не 4455), а пользователь должен угадать загаданное число. Допустим,
 * программа загадала число 1234, а пользователь назвал число 1359; программа
 * должна ответить "1 бык и 1 корова", поскольку пользователь угадал одну
 * правильную цифру (1) в правильной позиции (бык) и одну правильную цифру (3)
 * в неправильной позиции (корова). Угадывание продолжается, пока пользователь
 * не получит четырех быков, т.е. не угадает четыре правильные цифры в четырех
 * правильных позициях.
 *
 * Идея реализации:
 * ================
 * Первым делом генерируется вектор с загаданными значенимями компьютера. Числа
 * в векторе не должны повторяться.
 *
 * Как вектор был сгенерирован начинается игра (цикл while). В нем пользователю
 * необходимо ввести значения в другой вектор. При этом значения также не должны
 * повторяться, потому что могут выдаваться неверные результаты в виде коров.
 *
 * После того, как пользователь ввел данные, необходимо проверить количество
 * угаданных быков и коров. Для этого используются соответствующие функции.
 * Быки должны совпадать на соответствующих позициях в векторах, а коровы должны
 * совпадать в любом значении, кроме одинаковых позиций.
 *
 * Также есть переменная step, которая считает количество попыток пользователя.
 * */

#include "../../std_lib_facilities.h"

// Количество коров и быков в векторе
constexpr int CNT_ANIMALS = 4;


// * * * Вспомогательные функции для работы программы * * *
// Проверка на дубликаты; проверка на совпадения коров (быков)
//--------------------------------------------------------------------------------


// Функция проверки на совпадение коров
int check_cows(const vector <int> &animals, const vector <int> &answers) {
    int cnt_cows = 0;
    // Коровы должны совпадать на несоответствующих позициях
    for (int i = 0; i < answers.size(); ++i) {
        for (int j = 0; j < animals.size(); ++j)
            if (i != j && answers[i] == animals[j]) ++cnt_cows;
    }
    return cnt_cows;
}


// Функция проверки на совпадение быков
int check_bulls(const vector <int> &animals, const vector <int> &answers) {
    int cnt_bulls = 0;
    // Быки должны совпадать на соответствующих позициях
    for (int i = 0; i < answers.size(); ++i)
        if (answers[i] == animals[i]) ++cnt_bulls;
    return cnt_bulls;
}


// Проверка на наличие дубликатов в векторе
bool is_dublicate(int val, vector <int> &vect) {
    for (int vect_val : vect)
        if (val == vect_val) return true;
    return false;
}


// * * * Основные функция для работы игры * * *
// Начало игры; генерация вектора с ответами; создание вектора с ответами пользователя
//--------------------------------------------------------------------------------


// Функция создает вектор с ответами пользователя
vector <int> user_answers() {
    vector<int> answers;
    int answer_usr;

    cout << "Your answer (" << CNT_ANIMALS
         << " numbers) " << endl;

    int i = 0;
    while (i < CNT_ANIMALS) {
        try {
            cin >> answer_usr;
            if (!cin) {
                // Очистка cin от ошибочного состояния
                cin.clear();
                // Очистка буфера от предыдущего ввода
                cin.ignore();
                throw runtime_error("Invalid argument");
            }
            // Проверка на дубликаты
            if ( is_dublicate(answer_usr, answers) )
                throw runtime_error("There should be no duplicate numbers");
            answers.push_back(answer_usr);
            ++i;
        } catch (exception &e) {
            cerr << e.what() << endl;
        }
    }
    return answers;
}


// Генерация вектора с загаданными числами
vector <int> gen_animals() {
    vector <int> animals;
    int rand_val;
    // Дает обозначение можно ли добавить значение в вектор
    bool add_num;

    // Необходимо для генерации новых чисел
    srand( time(0) );
    while (animals.size() < CNT_ANIMALS) {
        rand_val = rand() % 10;
        // Проверка на дубликаты
        add_num = !is_dublicate(rand_val, animals);
        if (add_num) animals.push_back(rand_val);
    }

    return animals;
}


// Начало игры пользователя и компьютера
void start_game(const vector <int> &animals, vector <int> &answers) {
    // Количество угаданных быков и коров
    int bulls = 0, cows = 0;
    // Количество попыток потребуемое для угадывания всех быков
    int steps = 0;

    while (bulls < CNT_ANIMALS) {
        // Создание вектора с ответами пользователя
        answers = user_answers();
        // Сравнение на совпадение быков и коров
        bulls = check_bulls(animals, answers);
        cows = check_cows(animals, answers);

        cout << bulls << " bulls and "
             << cows << " cows" << endl;
        ++steps;
    }
    cout << "Congratulations!\n"
            "You guessed all the bulls in " << steps << " steps" << endl;
}


int main() {
    try {
        // Загаданный вектор
        vector <int> animals = gen_animals();
        // Ответы пользователя
        vector <int> answers;

        start_game(animals, answers);
        return 0;
    } catch(runtime_error &e) {
        cerr << e.what() << endl;
        return 1;
    }
}