/*
 * Описание задачи:
 * ================
 * Разработайте и реализуйте класс Name_pairs, содержащий пару (имя, возраст), где
 * имя - объект класса string, а возраст - переменная типа double. Представьте эти
 * члены класса в виде объектов классов vector<string> (с именем name) и
 * vector<double> (с именем age). Предусмотрите операцию ввода read_names(),
 * считывающую ряд имен. Предусмотрите операцию read_ages(), предлагающую
 * пользователю ввести возраст для каждого имени. Предусмотрите операцию print(),
 * которая выводит на экран пары (name[i], age[i]) (по одной в строке) в порядке,
 * определенном вектором name. Предусмотрите операцию sort(), упорядочивающую
 * вектор name в алфавитном порядке и соответствующим образом реорганизующую
 * вектор age. Реализуйте все "операции" как функции-члены. Протестируйте этот
 * класс (конечно, тестировать надо как можно раньше и чаще).
 *
 * Идея реализации:
 * ================
 * Класс Name_pairs выделен в отдельный файл. Все функции, за исключением, sort
 * являются простыми и не представляют трудностей. Функия sort реализована таким
 * же образом, как и в предыдущей задаче про сортировку. Идея её заключается в том,
 * что необходимо сделать копию вектора имен и сравнивать оригинал имен и копию.
 * При совпадении значений обменять в копии на соответствующих местах и также
 * сделать обмен в векторе ages.
 * */

#include "Name_pairs.h"

int main() {
    try {
        Pairs::Name_pairs obj{};
        obj.read_names();
        obj.read_ages();
        obj.print();

        obj.sort();
        obj.print();

        return 0;
    } catch (std::runtime_error &e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }
}