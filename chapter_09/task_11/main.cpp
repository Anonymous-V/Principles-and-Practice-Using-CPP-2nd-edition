/*
 * Описание задачи:
 * ================
 * Разработайте и реализуйте набор вспомогательных функций для класса Date, включая
 * такие функции, как next_workday() (в предположении, что любой день, кроме
 * субботы и воскресенья, является рабочим) и week_of_year() (в предположении, что
 * первая неделя начинается 1 января, а первый день недели - воскресенье).
 *
 * Идея реализации:
 * ================
 * Для реализации этой задаче потребовалось написать несколько вспомогательных
 * функций:
 * 1. add_day()
 * 2. add_month()
 * 3. add_year()
 * 4. days_in_month()
 * 5. day_of_week()
 *
 * Первые три функции необходимы для увеличения даты по n. Если количество дней
 * больше положенного, то необходимо увеличить месяц. Если месяцев больше
 * положенного, то необходимо увеличить год.
 * Чтобы получить количество недель в году (до текущей даты) необходимо знать
 * количество дней в каждом месяце, чтобы их потом сложить и поделить на 7
 * (предполагаем, что новый год начинается 1 января в понедельник).
 * Также количество дней в месяце необходимо, чтобы вычислить следующий рабочий
 * день.
 * Описание работы функций записаны комментариями в самих функциях.
 * */

#include "Chrono.h"

int main() {
    try {
        Chrono::Date date{2018, Chrono::Month::may, 25};
        std::cout << "Today:         " << date << std::endl;

        date.add_day(22);
        std::cout << "Add days (22): " << date << std::endl;
        std::cout << "Next workday:  " << Chrono::next_workday(date) << std::endl;
        std::cout << "Week of year:  " << Chrono::week_of_year(date) << std::endl;

        return 0;
    } catch (std::exception &e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }
}